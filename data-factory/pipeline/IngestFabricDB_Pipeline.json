{
	"name": "IngestFabricDB_Pipeline",
	"properties": {
		"activities": [
			{
				"name": "Get a list of tables in the source DB",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT \n    t.TABLE_NAME AS tableName,\n    t.TABLE_SCHEMA AS schemaName,\n    COALESCE(m.is_incremental, 0) AS isIncremental,\n    COALESCE(m.watermark_column, '') AS watermarkColumn,\n    COALESCE(m.last_loaded, '2000-01-01') AS lastLoadedDate\nFROM INFORMATION_SCHEMA.TABLES t\nLEFT JOIN dbo.ETL_Table_Metadata m\n    ON t.TABLE_NAME = m.table_name\nWHERE t.TABLE_SCHEMA = 'dbo';",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DynamicAzureSQLDB_DS",
						"type": "DatasetReference",
						"parameters": {
							"serverName": {
								"value": "@pipeline().parameters.serverName",
								"type": "Expression"
							},
							"databaseName": {
								"value": "@pipeline().parameters.databaseName",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Iterate throught the list of tables ingested",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get a list of tables in the source DB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get a list of tables in the source DB').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy data from the iteration to datalake",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Get last watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Get new watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@{if(\n  equals(item().isIncremental, 1),\n  concat('SELECT * FROM ', item().schemaName, '.', item().tableName,\n         ' WHERE ', item().watermarkColumn, ' > ''',\n         activity('Get last watermark').output.firstRow.last_loaded, ''''),\n  concat('SELECT * FROM ', item().schemaName, '.', item().tableName)\n)}\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DynamicAzureSQLDB_DS",
									"type": "DatasetReference",
									"parameters": {
										"serverName": {
											"value": "@pipeline().parameters.serverName",
											"type": "Expression"
										},
										"databaseName": {
											"value": "@pipeline().parameters.databaseName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DynamicADLS_CSV_DS",
									"type": "DatasetReference",
									"parameters": {
										"serverName": {
											"value": "@pipeline().parameters.serverName",
											"type": "Expression"
										},
										"databaseName": {
											"value": "@pipeline().parameters.databaseName",
											"type": "Expression"
										},
										"tableName": {
											"value": "@item().tableName",
											"type": "Expression"
										},
										"schemaName": {
											"value": "@item().schemaName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Get last watermark",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "SELECT last_loaded \nFROM dbo.ETL_Table_Metadata \nWHERE table_name = '@{item().tableName}'\n",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DynamicAzureSQLDB_DS",
									"type": "DatasetReference",
									"parameters": {
										"serverName": {
											"value": "@pipeline().parameters.serverName",
											"type": "Expression"
										},
										"databaseName": {
											"value": "@pipeline().parameters.databaseName",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Get new watermark",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@if(\n  and(\n    equals(item().isIncremental, 1),\n    not(empty(item().watermarkColumn))\n  ),\n  concat('SELECT MAX(', item().watermarkColumn, ') AS new_watermark FROM ', item().schemaName, '.', item().tableName),\n  'SELECT NULL AS new_watermark'\n)\n\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DynamicAzureSQLDB_DS",
									"type": "DatasetReference",
									"parameters": {
										"serverName": {
											"value": "@pipeline().parameters.serverName",
											"type": "Expression"
										},
										"databaseName": {
											"value": "@pipeline().parameters.databaseName",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Update watermark",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy data from the iteration to datalake",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[usp_UpdateWatermark]",
								"storedProcedureParameters": {
									"tableName": {
										"value": {
											"value": "@item().tableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"newWatermark": {
										"value": {
											"value": "@activity('Get new watermark').output.firstRow.new_watermark",
											"type": "Expression"
										},
										"type": "Datetime"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "DynamicAzureSqlDB_LS",
								"type": "LinkedServiceReference",
								"parameters": {
									"serverName": {
										"value": "@pipeline().parameters.serverName",
										"type": "Expression"
									},
									"databaseName": {
										"value": "@pipeline().parameters.databaseName",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"serverName": {
				"type": "string",
				"defaultValue": "ttcxzh37dhhetma2y22gr4ayd4-6o4m74iprbeuzbh4avtwleehci.database.fabric.microsoft.com,1433"
			},
			"databaseName": {
				"type": "string",
				"defaultValue": "FabricDB_Dev-c47ef5b3-00c6-4929-99cf-3a89a34487a6"
			}
		},
		"annotations": []
	}
}